{
  "pyRevit snippet 1": {
    "scope": "python",
    "prefix": "pyr1",
    "body": [
      "# -*- coding: utf-8 -*-",
      "",
      "from pyrevit import revit, DB, forms, script",
      "",
      "output = script.get_output()",
      "output.close_others()",
      "",
      "doc = revit.doc",
      "uidoc = revit.uidoc",
      "",
      "${1:collector_name} = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.${2:OST_Walls}).WhereElementIsNotElementType().ToElements()",
      "",
      "${3:class}_ids = []",
      "for element in ${1:collector_name}:",
      "   print(element.Id)"
    ],
    "description": "snippet for pyRevit"
  },
  "pyRevit snippet 2": {
    "scope": "python",
    "prefix": "pyr2",
    "body": [
      "# -*- coding: utf-8 -*-",
      "",
      "from pyrevit import revit, DB, forms, script",
      "",
      "output = script.get_output()",
      "output.close_others()",
      "",
      "doc = revit.doc",
      "uidoc = revit.uidoc",
      "",
      "${1:collector_name} = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.${2:OST_Walls}).WhereElementIsNotElementType().ToElements()",
      "",
      "${3:class}_ids = []",
      "${3:class}_heights = []",
      "${3:class}_type_names = []",
      "",
      "for element in ${1:collector_name}:",
      "   ${3:class}_ids.append(output.linkify(element.Id))",
      "   ${3:class}_height = element.get_Parameter(DB.BuiltInParameter.${4:WALL_USER_HEIGHT_PARAM}).AsValueString()",
      "   ${3:class}_heights.append(${3:class}_height)",
      "   ${3:class}_type_name = element.LookupParameter(\"Type\").AsValueString()",
      "   ${3:class}_type_names.append(${3:class}_type_name)",
      "",
      "output.print_md(\"# ${3:class}\")",
      "output.print_table(zip(${3:class}_ids, ${3:class}_heights, ${3:class}_type_names), columns=[\"Id\", \"${5:Parameter Name}\", \"${3:class} Type Name\"])",
      "$6"
    ],
    "description": "more advanced snippet for pyRevit"
  },
  "pyRevit snippet 3": {
    "scope": "python",
    "prefix": "pyr3",
    "body": [
      "# -*- coding: utf-8 -*-",
      "",
      "from pyrevit import revit, DB, forms, script",
      "",
      "output = script.get_output()",
      "output.close_others()",
      "",
      "doc = revit.doc",
      "uidoc = revit.uidoc",
      "",
      "def ${0:def_name}():",
      "    # create a filter for walls with analytical model deactivated",
      "    param = DB.BuiltInParameter.STRUCTURAL_ANALYTICAL_MODEL",
      "    provider = DB.ParameterValueProvider(DB.ElementId(param))",
      "    evaluator = DB.FilterNumericEquals()",
      "    rule = DB.FilterIntegerRule(provider, evaluator, 0)",
      "    filter = DB.ElementParameterFilter(rule)",
      "    ${1:collector_name} = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.${2:OST_Walls}).WherePasses(filter).WhereElementIsNotElementType().ToElements()",
      "    return ${1:collector_name}",
      "",
      "${3:class}_ids = []",
      "${3:class}_heights = []",
      "${3:class}_type_names = []",
      "",
      "for element in ${0:def_name}():",
      "   ${3:class}_ids.append(output.linkify(element.Id))",
      "   ${3:class}_height = element.get_Parameter(DB.BuiltInParameter.${4:WALL_USER_HEIGHT_PARAM}).AsValueString()",
      "   ${3:class}_heights.append(${3:class}_height)",
      "   ${3:class}_type_name = element.LookupParameter(\"Type\").AsValueString()",
      "   ${3:class}_type_names.append(${3:class}_type_name)",
      "",
      "output.print_md(\"# ${3:class}\")",
      "output.print_table(zip(${3:class}_ids, ${3:class}_heights, ${3:class}_type_names), columns=[\"Id\", \"${5:Parameter Name}\", \"${3:class} Type Name\"])",
      "$6"
    ],
    "description": "more advanced snippet for pyRevit defining a function and a filtered collector"
  }
}
